[{"categories":["肥宅快乐屋"],"content":" 来源：视频 ","date":"2022-04-15","objectID":"/genshin-artifacts-dogfood-route/:0:0","tags":["原神"],"title":"原神圣遗物狗粮路线","uri":"/genshin-artifacts-dogfood-route/"},{"categories":["肥宅快乐屋"],"content":"前言 每次对着视频跑太慢了，记一个文字版本的方便查阅。之前有在 B 站专栏记过一个 AB 双线的跑法，结果自己并没有闲到每天去捡，而且专栏只有三次编辑机会不便修改，于是在这记一个单线路线，想起来了就捡一下。 警告 本记录为纯文字自用记录，其中包含大量自造词语与指代。 ","date":"2022-04-15","objectID":"/genshin-artifacts-dogfood-route/:1:0","tags":["原神"],"title":"原神圣遗物狗粮路线","uri":"/genshin-artifacts-dogfood-route/"},{"categories":["肥宅快乐屋"],"content":"雪山 近郊上边传送点向北过坡后右转沿路走，箱子桶处3个。 星荧洞窟左上传送点东边洞跳下直走路口右转，过洞口后书架4个。 ","date":"2022-04-15","objectID":"/genshin-artifacts-dogfood-route/:2:0","tags":["原神"],"title":"原神圣遗物狗粮路线","uri":"/genshin-artifacts-dogfood-route/"},{"categories":["肥宅快乐屋"],"content":"璃月 地中之盐传送点向西北渡海，小帐篷里3个。 轻策庄右边传送点回头进屋子箱子1个，向西过桥酒罐车1个，沿路右手房子前1个。 奥藏山正右传送点向北营地3个，向东破车2个。 奥藏山右下传送点面前屋子两边各1个。 奥藏山右下传送点东北上坡沿路营地1个。 望舒客栈左上传送点面前破车1个，沿路向东南走右手边稻草人旁箱子1个，沿路向东南破船1个，前面房子码头俩桶1个，回破船向西南仙灵台旁璃月老窖全捡。 绝云间传送点沿路东南屋子旁3个。 禄华池右边传送点东边小帐篷3个。 ","date":"2022-04-15","objectID":"/genshin-artifacts-dogfood-route/:3:0","tags":["原神"],"title":"原神圣遗物狗粮路线","uri":"/genshin-artifacts-dogfood-route/"},{"categories":["肥宅快乐屋"],"content":"稻妻 平海砦正左传送点面前帐篷里2个，西北箱子1个，西南上山向南捡雷种子飞到山顶箱子1个，东北草里箱子1个，再东北箱子1个，向东跳下解谜地板旁桶1个，沿路向南右手箱子1个。 越石村神像西南上墙箱子1个，向北跳下右手桶1个，背后2个，向北跳下洞右手边2个，爬出来向北箱子1个，再向北箱子1个。 越石村中间传送点向南沿路右手帐篷旁箱子1个，向南箱子2个，向西北帐篷处右转进船，左转2个，前面小房间3个，另一个门出来向前飞右手门边2个，跳下来最前方左边箱子2个，从破洞下来，东南方木板处2个，向西门前右手边1个，进门楼梯下2个，上楼梯3个。 猫猫神社传送点向东南走右手边钻树根后右转箱子处3个。 海祇岛神像跳下沿路向南左手石头1个，继续沿路从桥左边跳下石头1个，向西南石头1个，向东右手平台上石头1个，沿平台走到头左转到头石头1个，向北箱子1个，旁边洞里2个。 望泷村右边传送点向北瀑布中间石头1个，左手边跳下向北飞，两瀑布中间一个洞里5个。 堇色之庭副本（鸣神岛神无冢中间） 左手捡雷种子上山罐子1个，向西南罐子1个，南边小山头罐子1个，东北小山头下罐子1个。 踏鞴砂神像右边传送点大炮旁3个，东边跳下车轱辘旁箱子1个，旁边帐篷柱子上1个，前边车上1个。 警告 下面的步骤是为了突破每日100调查点上限，需严格遵守。 踏鞴砂神像右下传送点东方跳下盗宝团旁桶1个，向西北沿路向西，左侧栅栏旁桶1个，沿路前面桶1个。 踏鞴砂神像右下传送点西北木架子中间的1个，向西箱子上绳子1个，向西北木平台飞箱子1个，从罩子左侧跳下一层梯子处1个。 踏鞴砂最南传送点北方跳下平台处绳子1个箱子1个，断桥处开扇子向前飞，尽头平台1个，沿平台走房子窗户处1个，前面路灯下1个，窗户旁1个，下楼梯左手边雷种子旁箱子1个，沿螺旋上去钻过板子后左转，房子窗户处1个，另一边窗户处1个，沿楼梯向上房子窗户旁1个，回头箱子绳子处1个，罐子1个，北方缺口处跳下箱子木板1个，向西上房顶飞过断桥，尽头吊塔1个，东北跳下桶1个，沿路向东北上石台再上木台箱子1个。 踏鞴砂神像左下传送点东南箱子绳子1个。 ","date":"2022-04-15","objectID":"/genshin-artifacts-dogfood-route/:4:0","tags":["原神"],"title":"原神圣遗物狗粮路线","uri":"/genshin-artifacts-dogfood-route/"},{"categories":["小站纪念墙"],"content":"前言 之前一直在用 PaperMod主题 ，但是最近拉取了一下更新，主页中 profile 模式对于头像的读取方式发生了点变化，一是不能使用外链只能用本地图像，二是图变糊了。对问题一可以修改 layout 文件解决，但是二真的搞不懂😕。 于是乎，是时候打开新世界的大门了（指换主题）。 ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:1:0","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"换新 LoveIt主题 是我早已中意的。它有简洁大方的布局，舒服的配色，合适的字体大小和间距。而且不得不提代码折叠和提醒框 shortcode ，真的是深深戳中我，可惜上篇文章刚准备介绍一个找到的提醒框代码，还没写好就夭折了😇。 ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:2:0","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"几个需要注意的点 要使用 admonition 等功能，需要 hugo extended 版本。 fontawesome 需要用v5版的，v6试了一下无法引入。见 fontawesome支持 。更新：好像需要使用 solid 版本，待验证。 tags categories posts 用的是 _index.md ，但是 about 页面需要用 index.md ，不然会不渲染内容。 评论系统默认不支持 waline ，如果使用需要修改模板文件 comment.html single.html 。具体做法为： 新建 layouts/partials/comment.html ，复制 themes/LoveIt/layouts/partials/comment.html 的内容，然后在 Valine 的部分后面加入： {{- /* Waline Comment System */ -}} {{- $waline := $comment.waline | default dict -}} {{- if $waline.enable -}} \u003cdiv id=\"waline-container\" class=\"comment\"\u003e\u003c/div\u003e \u003cscript src=\"{{ $waline.cdn }}\"\u003e\u003c/script\u003e \u003cscript\u003e new Waline({ el: '#waline-container', serverURL: '{{ $waline.serverURL }}', dark: 'body[theme=\"dark\"]', visitor: '{{ $waline.visitor }}', avatar: '{{ $waline.avatar }}', emoji: [ 'https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo', 'https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/tieba', 'https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili', ], login: '{{ $waline.login }}', placeholder: '{{ $waline.placeholder }}' }); \u003c/script\u003e \u003cnoscript\u003e Please enable JavaScript to view the comments powered by \u003ca href=\"https://waline.js.org/\"\u003eWaline\u003c/a\u003e. \u003c/noscript\u003e {{- end -}} 警告 其中 dark 字段是针对 LoveIt 主题进行的设置，不同主题间可能不通用。 在 config.toml 中，配置 waline： # Waline 评论 [params.page.comment.waline] enable = true cdn = \"//cdn.jsdelivr.net/npm/@waline/client\" serverURL = \"your-serverURL\" visitor = true # 访问量统计 avatar = \"retro\" # 默认头像 login = \"force\" # 强制登陆后评论 placeholder = \"登陆后才能评论哦~\" 此时访问量统计还没有真正生效。需要复制 themes/LoveIt/layouts/posts/single.html 到 layouts/posts/single.html 并修改，定位到： {{- if $comment.enable | and $comment.valine.enable | and $comment.valine.visitor -}} \u003cspan id=\"{{ .RelPermalink }}\" class=\"leancloud_visitors\" data-flag-title=\"{{ .Title }}\"\u003e \u003ci class=\"far fa-eye fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003cspan class=leancloud-visitors-count\u003e\u003c/span\u003e\u0026nbsp;{{ T \"views\" }} \u003c/span\u003e\u0026nbsp; {{- end -}} 在其后面添加： {{- if $comment.enable | and $comment.waline.enable | and $comment.waline.visitor -}} \u003cspan id=\"{{ .RelPermalink }}\" class=\"leancloud_visitors\" data-flag-title=\"{{ .Title }}\"\u003e \u003ci class=\"far fa-eye fa-fw\"\u003e\u003c/i\u003e\u0026nbsp;\u003cspan class=leancloud-visitors-count\u003e\u003c/span\u003e\u0026nbsp;{{ T \"views\" }} \u003c/span\u003e\u0026nbsp; {{- end -}} 其实就是把 valine 改成 waline 啦。 警告 waline 说 2.x 版本会移除对 leancloud_visitors的支持，需注意。 默认的 lunr 搜索的分词效果不好，如需要可以切换成 algolia 。这个是 Todo，lunr 也能用，只是如果你输入一个字或者半个单词，它就会傻掉搜不出结果，它只认词语和完整单词😅。 这篇文章介绍了在 github action 中配置 algolia 搜索的方法，借鉴一下。 首先，注册一个 algolia 账号，并创建一个 Index。 其次，在 overview--\u003eAPI Keys 中记住三个 Key。 然后在 .github/warkflows/gh-pages.yaml 中添加： - name:Update Algolia Indexenv:ALGOLIA_APP_ID:# 填写相应内容ALGOLIA_ADMIN_KEY:# 填写相应内容ALGOLIA_INDEX_NAME:# 填写相应内容ALGOLIA_INDEX_FILE:# 填写相应内容run:|sudo apt-get -yqq install npm sudo npm install atomic-algolia -g atomic-algolia 关于配置 github actions 自动部署，可以参考我的这篇文章。 同时在 config.toml 中设置搜索引擎为 algolia ，并填入 appID index searchKey （不一定必须，未测试）。 最后 push 你的代码，等待部署完成后就发现搜索变为 “Searched by Algolia” 啦！ ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:2:1","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"美化 ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:3:0","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"favicon 使用 realfavicongenerator 来生成 favicon ，下载压缩包后放到 /static 目录下即可，这样 hugo 生成后这些图标会在网站根目录下。 技巧 修改完 favicon 后请重启浏览器刷新缓存后再观看效果。 ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:3:1","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"header 字体 LoveIt 主题默认的字体是黑体，整体效果很不错，但是我想让左上角 header 的字体更个性一点。 就是这个\" 就是这个 于是查阅文档，说到： 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 于是新建 assets/css/_override.scss ，编辑内容为： $header-title-font-family: Lucida Handwriting; $header-title-font-size: 1.5rem; 此时再看 header： cooler\" cooler 🆒👍 同时你也可以使用 google fonts 的 API 来引入字体，比如在 assets/css/_override.scss 中： @import url('https://fonts.googleapis.com/css2?family=Rock+Salt\u0026display=swap'); $header-title-font-family: Rock Salt; $header-title-font-size: 1.5rem; 显示效果为： also cooler\" also cooler 信息 使用 API 引入字体可以使其跨平台显示，否则如手机端本地没有这个字体，则还是会以默认字体显示。 ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:3:2","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"图片相关 后来想了一下，还是决定把图片从 static 目录迁移到各文章自己的目录下。一开始放在 static 里的原因是考虑到图片可能会有复用的需求，经过这一段时间来看，本身写文章的频率就不高，一篇文章又附不了几张图，还是放在各文章的目录下方便管理和引用。 顺便，LoveIt 主题提供了 image shortcode 来插入图片，相比 figure 来说有以下优点： 图片标题为浅色显示，与内容更为融洽。 可以点开查看大图。 支持画廊模式，该功能由 config.toml 中 params.page.lightgallery 控制是否启用，也可以在文章前置参数中单独设置。 可以给图片设置链接。 但是 image 默认无法接收位置参数，使得图片都是左对齐，这在文章中不甚美观 。为了使图片居中对齐，我们要用到 style shortcode： {{\u003c style \"text-align:center\" \u003e}} {{\u003c image src=\"\" \u003e}} {{\u003c /style \u003e}} 这样图片就能居中对齐啦。 Bug image 的左对齐现象触发原因不明，除了 style 方法外，观察到为图片添加 caption 字段也可以使其居中对齐。 信息 image style shortcode 均需要 hugo extended 版本。 ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:3:3","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"后记 至此新主题基本收拾好了，看着不错！ ","date":"2022-03-30","objectID":"/change-theme-from-papermod-to-loveit/:4:0","tags":["Hugo","LoveIt","Waline","Algolia"],"title":"切换主题——从PaperMod到LoveIt","uri":"/change-theme-from-papermod-to-loveit/"},{"categories":["小站纪念墙"],"content":"为什么要建立图床 考虑： $$ \\lim\\limits_{文章 \\rightarrow \\infty} 文章图片 \\rightarrow \\infty $$ 所以把图片单独存放在图床里是很有远见的行为（🤔）1。 ","date":"2022-03-29","objectID":"/figure-bed/:1:0","tags":["图床"],"title":"个人图床搭建历程——阿里云域名+七牛云对象存储+picgo","uri":"/figure-bed/"},{"categories":["小站纪念墙"],"content":"图床建立过程 ","date":"2022-03-29","objectID":"/figure-bed/:2:0","tags":["图床"],"title":"个人图床搭建历程——阿里云域名+七牛云对象存储+picgo","uri":"/figure-bed/"},{"categories":["小站纪念墙"],"content":"准备 建立图床需要准备两样东西： 购买一个域名，需要实名认证并进行 ICP 备案。我买了个阿里云的域名，备案时被告知需要阿里云服务器的备案服务码，否则无法备案。可是我并没有使用服务器的需要啊？无奈，某宝 2 元买了一个服务码。 然后就是填写信息，网站名称写了个人文件存储，注意名称里不能有关键字（”博客“也是关键字😅）。服务类型选了文件服务，之后提交阿里云初审。我大概是下午三四点提交的初审，六点多的时候就接到了阿里云的电话，告知我网站名称需要再加点英文或数字，我说那帮我加个123吧，之后就提交工信部审核了。 第二天上午九点多，收到了审批通过的短信和备案号。总的来说还挺快的。 然后进入阿里云 ICP 备案界面可以看到备案成功，同时提醒你进行公安备案（但是单做图床使用的话好像不必须公安备案）。 购买一个对象存储服务。这里选择了七牛云，注册并实名认证后可以享受每月免费 10G 对象存储和 10G CDN 加速额度，香。 ","date":"2022-03-29","objectID":"/figure-bed/:2:1","tags":["图床"],"title":"个人图床搭建历程——阿里云域名+七牛云对象存储+picgo","uri":"/figure-bed/"},{"categories":["小站纪念墙"],"content":"开始搭建 首先需要新建一个对象存储实例。访问控制选择公开，否则无法通过链接访问图片。地区我选择了华东。 公开访问控制\" 公开访问控制 Bug 这里地区选择 华东-浙江2 的话，会由于区域代码的问题，导致后面 picgo 上传失败，这是一个 picgo 的 bug ，见 GitHub issue 。 之后绑定域名。在 域名管理--\u003e自定义 CDN 加速域名 ，选择绑定域名，这里可以写已备案域名的二级域名，别的设置都默认即可。 绑定域名\" 绑定域名 最下面的 缓存配置 ，使用推荐配置即可。 设置好后，你会拿到一个 CNAME 字段，复制下来。之后去你的域名控制台里添加一条解析记录，记录类型 CNAME ，主机记录写二级域名，记录值粘贴七牛云生成的 CNAME 即可。 解析域名\" 解析域名 回到七牛云控制台，稍作等待，看到域名状态成功，然后你就可以使用你的域名 http://img.xxxx.com/img1.png 来随意访问图片啦。 ","date":"2022-03-29","objectID":"/figure-bed/:2:2","tags":["图床"],"title":"个人图床搭建历程——阿里云域名+七牛云对象存储+picgo","uri":"/figure-bed/"},{"categories":["小站纪念墙"],"content":"上传图片到图床 picgo 是一款方便的图床上传工具。 picgo 设置\" picgo 设置 AccessKey / SecretKey 可以在七牛云 密钥管理 中找到。 存储空间名就写你刚创建的的实例名。 访问网址写刚绑定的加速域名，注意添加 http:// 。 存储区域代码。 就我个人而言，我希望在上传图片前先对其压缩，这样可以节省很多空间和流量。你既可以在本地手动压缩后再上传，又可以使用 picgo 插件 picgo-plugin-compress 。 安装此插件需要先安装 node.js ，python 以及 vs c++ build tool 。这些都可以在安装 node.js 时勾选 安装额外构建工具 来安装，如果你已经安装了 node.js ，那么可以在电脑应用列表里找到 Install Additional Tools for Node.js ，运行它即可。 我之前因为作业需要已经安装了 python (miniconda) ，于是我想卸载 node 为我装的 python 。使用管理员身份运行 powershell ，列出本地包： $ choco list --local Chocolatey v1.0.1 chocolatey 1.0.1 chocolatey-core.extension 1.3.5.1 chocolatey-dotnetfx.extension 1.0.1 chocolatey-visualstudio.extension 1.10.0 chocolatey-windowsupdate.extension 1.0.4 dotnetfx 4.8.0.20190930 KB2919355 1.0.20160915 KB2919442 1.0.20160915 KB2999226 1.0.20181019 KB3033929 1.0.5 KB3035131 1.0.3 python 3.10.4 python3 3.10.4 vcredist140 14.31.31103 vcredist2015 14.0.24215.20170201 visualstudio-installer 2.0.2 visualstudio2019-workload-vctools 1.0.1 visualstudio2019buildtools 16.11.11.0 18 packages installed. 然后 choco uninstall python python3 即可。 之后在picgo 插件设置 中搜索 compress ，安装作者为 juzisang 的那个。 安装完成后，点击插件的 设置--\u003e启用transformer 可以启用，设置--\u003e配置plugin 可以设置上传时图片的压缩方式。 ","date":"2022-03-29","objectID":"/figure-bed/:2:3","tags":["图床"],"title":"个人图床搭建历程——阿里云域名+七牛云对象存储+picgo","uri":"/figure-bed/"},{"categories":["小站纪念墙"],"content":"后记 全过程中的决速步骤：备案。 今后写博客可以放肆地放图了😋。 失败 好吧，hugo 站点拉取图片好像用的是 https ，但是七牛云免费流量不包括 https ，这就导致图片无法正常显示，成了一个链接。 我还是先老实把图片和博客放在一个仓库吧。😢 按一张图 100K 算，我要发一万张图才能破 1G ，whatever。 ↩︎ ","date":"2022-03-29","objectID":"/figure-bed/:3:0","tags":["图床"],"title":"个人图床搭建历程——阿里云域名+七牛云对象存储+picgo","uri":"/figure-bed/"},{"categories":["知识图书馆"],"content":"Linux is free when your time is free","date":"2022-03-25","objectID":"/linux-ubuntu-record/","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"Why Linux \u0026 Ubuntu 因为Linux很酷✔ 之前折腾过一阵Manjaro，是一个arch系的滚动更新的系统，结果被我滚挂过两次😅。因为要装在实验室电脑上，寒暑假可能一段时间不会碰它，这就又加大了滚挂的概率，所以这次捯饬一下Ubuntu。顺便换个口味，由KDE Plasma换成Gnome桌面环境体验一下。 P.S. 试了一下Pop!_OS，好看是确实好看，但是自带的商店应用会每次在联网打开时卡死，啊这。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:1:0","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"安装过程 使用ventoy做启动盘，很方便，iso选择Ubuntu 20.04 LTS。 上来先用Windows11的cmd格一下盘，在安装界面shift+F10： diskpart list disk select disk 0 clean 之后开始安装，一路next。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:2:0","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"换源 软件和更新--\u003eUbuntu软件--\u003e下载自，我选了阿里云镜像。然后执行： sudo apt update sudo apt upgrade 来更新。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:2:1","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"魔法 选择v2raya，不便多说。用Linux还是得有魔法，或者就用deepin那种，毕竟主要的生态还是在国外的。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:2:2","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"家目录转英文 选择中文安装系统之后，家目录下默认为中文，这样使用终端很不方便，于是将其英文化。 终端输入 export LANG=en_US xdg-user-dirs-gtk-update 在弹窗中同意。 终端输入 export LANG=zh_CN 注销再登陆，选择保留旧名称，不再提醒。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:2:3","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"输入法 Ubuntu自带的ibus使用体验不是很好，候选字体缩放等等都是问题，这次图省事就装了搜狗输入法Linux版，关掉悬浮窗还是很干净的。 总的来说，Ubuntu的缩放和字体渲染做的都很不错，至此新系统已经可以正常使用啦。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:2:4","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"优化 虽然KDE桌面环境扩展度高，但是折腾到最后总是有一种零碎的感觉，gnome反而更像一个整体。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:0","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"Gnome Tweaks 这是Gnome桌面的优化软件，用来调整一些外观。 sudo apt install gnome-tweaks 在扩展--\u003eDesktop Icons中关闭桌面文件夹和回收站图标。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:1","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"Dock 在Gnome Extensions里安装Dash to Dock，调整图标大小为64，避开所有窗口，使用内置主题。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:2","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"字体 中文使用文泉驿米黑： sudo apt install fonts-wqy-microhei 英文使用JetBrains Mono，下载后解压到~/.local/share/fonts（或/usr/share/fonts，安装为系统字体），并执行fc-cache -f -v。 最后使用Gnome Tweaks来设置字体。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:3","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"主题 由于辣鸡显卡，装了自定义主题后总会出现贴图丢失的情况，所以就不搞自定义主题了，只改一下颜色，使用yaru-colors，clone下来之后sudo bash ./install.sh即可。我全部选择Aqua主题，比较清新。 之后还需要改一下终端配色，在配置文件首选项里改成solarized-dark，与Aqua主题色也比较配。 Note 我的环境安装yaru-colors后出现图标变形错位的现象，卸载无法解决问题，请谨慎安装。参见Github issue。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:4","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"zsh \u0026 oh-my-zsh zsh，一个比默认的bash好用得多的shell，oh-my-zsh是zsh的一个框架，赋予其额外功能以及插件管理等。 首先安装并切换默认shell为zsh: sudo apt install zsh zsh # 进行初始设置，全按照默认即可 chsh -s $(which zsh) # 切换默认shell 注意设置完后注销重新登陆。 之后参照oh-my-zsh的指令安装oh-my-zsh: sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" 这一步需要魔法助力，没有魔法的话可以搜索使用gitee镜像。 之后在~/.zshrc中更改配置，先改一下主题： ZSH_THEME=\"eastwood\" 这个主题非常简约，深得我心。然后更改插件，在~/.zshrc中 plugins=(git) 说明oh-my-zsh默认开启git插件，后面自己配置插件就是下载好后填进括号里就行。介绍一下我安装的插件： z 这个是默认装好的，需要自己开启，用处是根据历史快速跳转。比如之前访问过~/Downloads/game/pacman，再次访问的话只需z pacman即可。 zsh-syntax-highlighting 终端命令语法高亮显示。 zsh-autosuggestions 自动补全。 配置好后.zshrc是这样的： plugins=(git z zsh-syntax-highlighting zsh-autosuggestions) ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:5","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"fish shell fish是一个开箱即用的shell，几乎不需要自行配置。之前设置自定义终端颜色之后，与oh-my-zsh的颜色好像有点冲突，有时光标会不闪烁，很难受，于是改用了fish。 sudo apt install fish chsh -s $(which fish) ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:6","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"Pop Shell Pop Shell来源于基于Ubuntu的Pop!_OS，拥有非常好用的窗口自动平铺功能，会按照打开窗口的先后顺序以斐波那契数列形式在桌面上自动平铺。当然如果你愿意折腾，也可以使用awesome、i3wm等。 首先去下载它的release，之后安装TypeScript和Make： sudo apt install node-typescript make 将release解压缩后在目录中执行 make local-install 安装完毕后，在右上角打开Tile Windows和Show Active Hint。 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:7","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"清理启动引导项 因为来回装了不少系统，因此efi启动引导项非常多，正好今天查了查怎么删除：使用efibootmgr。 efibootmgr # 列出所有引导项 efibootmgr -b xxxx -B # 删除序号为xxxx的引导项 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:3:8","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["知识图书馆"],"content":"后记 虽然说本文内容不多，但是前前后后也是折腾了好几天，其间遇到各种细节问题，不胜枚举。有句话说得好：“Linux is free when your time is free”，此番过后也是深以为然。话又说回来，虽然历经坎坷，但过程中获得的快乐与成就感不会骗人。我想这就值得了。😄 ","date":"2022-03-25","objectID":"/linux-ubuntu-record/:4:0","tags":["Linux","Ubuntu"],"title":"Linux \u0026 Ubuntu 折腾记录","uri":"/linux-ubuntu-record/"},{"categories":["生活小窝"],"content":"今天终于把拖延已久的加强针打了，从十二月拖到了三月。拖拉的原因大致有三：一是校医院之前每周只半天供应疫苗，要打需要提前在网上预约，对我这种没什么时间概念的人来说，很容易就错过去了。二是杭州这边老在下雨，不打伞湿一身，打伞湿半身，实在是不想出门。三是懒。 事实证明，里面穿个短袖去打疫苗是无比明智的决定。本科打疫苗时就没有穿，只能把领子扒拉下来，露出肩膀，一直持续到针眼不再流血才行，那画面私以为，“不是很得体”。于是今日特意加了一件短袖，打针时只需左胳膊脱掉卫衣，可以说是从容不迫，等待医学观察时都能感受到刚扒拉完领子的人投来赞赏的目光。我略带得意，不时瞧向打针处，就想瞅瞅还有几个扒拉领子的。好巧不巧，轮到一位女士，她的领口比较大，扒拉下来后有些警觉地张望着，正与我四目相对。我眼神光速躲闪。医学观察半个小时，于是我度过了东张西望的五分钟，和正襟危坐的二十五分钟。正襟危坐，但是得体。 值得一提的是，我按针眼的棉签上没有一滴血。我将喜悦分享，小卢：“你好骄傲，why？”我：“小确傲”。 最近看到一个说法是“被疫情偷走的青春”。他们说，如果没有疫情，本可以有超棒的毕业旅行，有同学聚餐，有五彩斑斓的生活。我想了想，如果没有疫情，我本可以有什么呢？大概就是见小卢更方便了，再无其它。我不喜欢热闹，所以应该和他们口中的那种生活是天生的绝缘体。毕业旅行和朋友有过一次，很好玩但是也没有对它很执着。长时间呆在家里寝室里，我也没有什么不适感。如果人生是一列火车，那疫情也许是岔路口，在有的人顺畅直行时，坏笑着咣叽一下给车头导偏；接着我的小火车过来，疫情准备也给我来一下，结果咣叽打空，哎，这哥们就没打算直着走？也不是说众人皆醉我独醒，只是我对“偷走青春”这种说法没有很大共鸣而已。允许有的青春是彩色，那也该允许有的青春是素色。私以为，青春不该是一串同质化的仪式行为，青春的是人，是我，我在这个年纪做的事，都是青春。 也许回头有孩子了可以说，“你爹年轻的时候全世界死了几千万，而你爹我，活下来了”。超酷的。 ","date":"2022-03-23","objectID":"/enhanced-vaccine/:0:0","tags":[],"title":"打了加强针","uri":"/enhanced-vaccine/"},{"categories":["小站纪念墙"],"content":"起因 之前所有的文章都是直接堆在/posts下，虽然用了categories和tags双分类，但是感觉还是不够好，比如无法从一篇文章导航到它所属的category。于是今天决定使用二级目录来储存文章，参考这篇文章。 ","date":"2022-03-22","objectID":"/change-directory-and-font/:1:0","tags":[],"title":"更改一下博客目录结构与字体","uri":"/change-directory-and-font/"},{"categories":["小站纪念墙"],"content":"二级目录 首先删去之前的categories分类。在config.yaml中 taxonomies:#category: categories 注释掉tag:tagsmenu:main:- identifier:postsname:文章url:/posts/weight:1#- identifier: categories 注释掉#name: 分类#url: /categories/#weight: 2- identifier:archivesname:时间线url:/archives/weight:10- identifier:tagsname:标签url:/tags/weight:20- identifier:searchname:搜索url:/search/weight:30- identifier:aboutname:关于url:/about/weight:40 然后再删去archetypes里的相关内容。 这次暂且先将二级目录分为三类，分别是生活相关的生活小窝、技术相关的技术图书馆，还有建站专题博客历史馆。国有国史，站有站史，这很合理（有点赛博过家家的感觉了）。重排好的目录如图。 目录\" 目录 要注意每个二级目录下都要有一个_index.md，例如/life下的： ---title:生活小窝#标题hidemeta:true#隐藏这篇md的信息，如时间作者等weight:20#排序时的权重--- ","date":"2022-03-22","objectID":"/change-directory-and-font/:2:0","tags":[],"title":"更改一下博客目录结构与字体","uri":"/change-directory-and-font/"},{"categories":["小站纪念墙"],"content":"修改字体 新建assets/css/extended/blank.css，在里面的修改会覆盖默认css。 body{ font-family: FangSong; font-size: 18px; line-height: 1.6; } 修改为仿宋字体，目前感觉更好看点。 原来的\" 原来的 现在的\" 现在的 原来的\" 原来的 现在的\" 现在的 ","date":"2022-03-22","objectID":"/change-directory-and-font/:3:0","tags":[],"title":"更改一下博客目录结构与字体","uri":"/change-directory-and-font/"},{"categories":["小站纪念墙"],"content":"Hugo里使用post_meta描述文章的信息，比如发布时间、作者、标签、阅读时长等。这次受这篇文章的启发来修改一下，使其更加美观。 将themes/PaperMod/layouts/partials/post_meta.html拷贝到layouts/partials下，并修改： {{- $scratch := newScratch }} \u003c!--创建时间--\u003e {{- if not .Date.IsZero -}} {{- $scratch.Add \"meta\" (slice (printf \"发表于\u003cspan title='%s'\u003e%s\u003c/span\u003e\" (.Date) (.Date | time.Format (default \"2006-01-02\" .Site.Params.DateFormat)))) }} {{- end }} \u003c!--添加：修改时间--\u003e {{- if (.Param \"ShowLastMod\") -}} {{- $scratch.Add \"meta\" (slice (printf \"修改于\u003cspan title='%s'\u003e%s\u003c/span\u003e\" (.Lastmod) (.Lastmod | time.Format (default \"2006-01-02\" .Site.Params.DateFormat)))) }} {{- end }} \u003c!--阅读时间--\u003e {{- if (.Param \"ShowReadingTime\") -}} {{- $scratch.Add \"meta\" (slice (i18n \"read_time\" .ReadingTime | default (printf \"%d min\" .ReadingTime))) }} {{- end }} \u003c!--字数统计--\u003e {{- if (.Param \"ShowWordCount\") -}} {{- $scratch.Add \"meta\" (slice (i18n \"words\" .WordCount | default (printf \"%d words\" .WordCount))) }} {{- end }} {{- with (partial \"author.html\" .) }} {{- $scratch.Add \"meta\" (slice .) }} {{- end }} \u003c!--分隔符--\u003e {{- with ($scratch.Get \"meta\") }} {{- delimit . \"\u0026nbsp;·\u0026nbsp;\" -}} {{- end -}} 在config.yaml中： enableGitInfo:false# 关闭gitinfo，否则lastmod会显示为最后commit时间，有些bugparams:DateFormat:\"2006-01-02\"# 日期格式ShowLastMod:true# 显示lastmod 然后就可以在文章的front_matter中配置： lastmod:2022-03-21T21:53:51+08:00 也可以写进archetypes中： lastmod:{{.Date }} 后面再编辑时手动修改即可。 ","date":"2022-03-21","objectID":"/modify-post-meta/:0:0","tags":["Hugo"],"title":"修改文章post_meta信息","uri":"/modify-post-meta/"},{"categories":["小站纪念墙"],"content":"真是一个充实的下午。","date":"2021-12-22","objectID":"/deploy-website-via-github-actions/","tags":["Github","Hugo"],"title":"使用Github Actions部署私有仓库静态博客到Github Pages","uri":"/deploy-website-via-github-actions/"},{"categories":["小站纪念墙"],"content":"起因 最初部署博客是在本地直接编译框架源码，然后把编译后的静态网页文件上传到Github Pages仓库。可是同时我又想管理框架源码，如果源码和静态网页托管到一个仓库的话，那么仓库的可见性又成了问题：Private的话网页不能互联网公开可见，Public的话源码又暴露了。试了一下分别本地管理两个仓库，可是这样每次都要commit两遍push两遍，怪麻烦的。于是秉承程序员“花六个小时写一个自动化脚本，做一个动手五分钟就能搞定的任务”的黄金精神，我又开始折腾Github Actions自动部署啦。 -- ","date":"2021-12-22","objectID":"/deploy-website-via-github-actions/:1:0","tags":["Github","Hugo"],"title":"使用Github Actions部署私有仓库静态博客到Github Pages","uri":"/deploy-website-via-github-actions/"},{"categories":["小站纪念墙"],"content":"过程 官方（也许？）手册在此：GitHub Actions for Hugo GitHub Pages Github通过检测仓库根目录下的/.github/workflows/*.yaml来执行Actions。因此需要新建一个.yaml文件，取名随意，之后复制手册里的默认配置并修改。折腾一下午后我的配置文件如下： name:GitHub Pages # 为action取个名on:push:# 设定当仓库收到push后执行actionbranches:# 设定触发action的分支- master# pull_request: # 我不需要pr后执行action，所以注释掉jobs:deploy:runs-on:ubuntu-20.04 # 设定action的执行环境concurrency:group:${{ github.workflow }}-${{ github.ref }}steps:# 需要执行的步骤- uses:actions/checkout@v2 # 使用现成的action库with:# 设定执行的环境变量submodules:truefetch-depth:0- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:'latest'extended:false- name:Buildrun:hugo # 直接执行的指令- name:Deployuses:peaceiris/actions-gh-pages@v3if:${{ github.ref == 'refs/heads/master' }}with:deploy_key:${{ secrets.GH_PAGES }} # 改成自己deploy key的名字external_repository:Woodencross/Woodencross.github.io # public库的地址publish_branch:master # 要推送到public库的分支publish_dir:./public # 与源码的publishDir保持一致commit_message:${{ github.event.head_commit.message }} # 同步commit message 这里涉及到deploy key，这是什么呢？由于我的源码与action都在私有库里，静态网页在公开库里，而action自动部署的时候需要从私有库push到公开库，那么就需要一个像ssh key的东西（实际上就是ssh）来验证push者的身份。Github提供了三种验证方式，分别是github_token deploy_key与personal_token，其中只有deploy_key基于ssh，另两个都是基于https，那我自然选择最安全（理论上）的啦。 通过 ssh-keygen -t rsa -b 4096 -C \"$(git config user.email)\" -f gh-pages -N \"\" # You will get 2 files: # gh-pages.pub (public key) # gh-pages (private key) 生成公钥私钥文件，将公钥加入公开库的Settings-\u003eDeploy keys中（随便取个名字），将私钥加入私有库的Settings-\u003eSecrets中，注意这个的取名要和.yaml文件中的一致，这样私有库就能通过身份验证向公开库push内容了。当在源码中更新好内容后，只需要向私有库push，剩下的编译部署交给Github Actions来完成！ 当然纸面总结上看起来是很轻松的工作，但是实操起来踩的坑可不少，不然怎么花了一个下午？ 一个是submodule的问题。因为我之前的主题模板是直接git clone到源码里的，这就导致action执行时报错说“找不到.gitmodules”，应该是使用的action库默认大家的模板都是submodule吧。但是submodule这个东西实在是不好管理，老是搞得我重建仓库，而我自己又不会写action库，所以就还是勉为其难地用git submodule add来添加模板了。 PS：好像在一些情况下不能用git submodule add而要用git submodule--helper add。 二是Github分支问题，我的仓库都是默认的master，而文档里copy来的分支默认是main，有一处在第六行（高亮）很明显也是直接改了，但还有一处在第31行（高亮）……这个是真的很难注意到好吧。听朋友说Github主分支由master改叫main是黑命贵的产物，因为master有奴隶主的意思😅。真是差不多得了嗷。 三是愚蠢的typo，.github/workflows少了个s！！我还寻思push之后Github action怎么不工作，一度以为是为了防挖矿设置了每小时最大工作次数。 ","date":"2021-12-22","objectID":"/deploy-website-via-github-actions/:2:0","tags":["Github","Hugo"],"title":"使用Github Actions部署私有仓库静态博客到Github Pages","uri":"/deploy-website-via-github-actions/"},{"categories":["小站纪念墙"],"content":"结语 总而言之，网站的源码保护和自动化部署在经历了一个下午的折腾后也算是完美收官。我的评价是：值！（甚至老想手痒多提交几次欣赏成果~） ","date":"2021-12-22","objectID":"/deploy-website-via-github-actions/:3:0","tags":["Github","Hugo"],"title":"使用Github Actions部署私有仓库静态博客到Github Pages","uri":"/deploy-website-via-github-actions/"},{"categories":["小站纪念墙"],"content":"记录一下自己搭建个人博客的踩坑历程。","date":"2021-12-21","objectID":"/blog-building-record/","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"为什么想建个人博客 一个重要的原因是因为想有一个地方可以自己记录一些东西，而各种现成的平台一是觉得自定义程度不够高，二是内容又会经过层层审核甚至被夹掉，所以到最后就选择了自建一个博客小站。看着小站在自己手中逐渐完善，就好像自己逐渐装修起来一个精致舒适的小屋一样，会真正有一种“属于我”的归属感，这也是这个小站叫做“Woodencross’s Cyber Home”的原因。寄蜉蝣于天地，渺沧海之一粟，希望这个小站能够成为QC在赛博空间里的“锚”。 当然还有一个原因是忙完前一段突然得了点闲，就想折腾了😅。 ","date":"2021-12-21","objectID":"/blog-building-record/:1:0","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"Hugo\u0026Github Pages 自建博客当然要先选择一个框架啦，于是Google了一下目前主流的博客框架，再上Github看了一下⭐，Hugo的星最多，那么就决定是你了！ 至于Github Pages，白嫖嘛，多是一件美事啊。 ","date":"2021-12-21","objectID":"/blog-building-record/:2:0","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"踩坑经历 ","date":"2021-12-21","objectID":"/blog-building-record/:3:0","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"图片插入问题 由于编译静态网站后文件结构不同，因此在文章的.md中使用相对路径插入图片是行不通的，如下： posts |-article |-article.md |-img.png 此时在article.md中使用![](./img.png)引用图片会404。 那么正确的图片引用姿势有这几种： 使用图床，然后引用图片网址。这样的风险就是万一图床挂了或者网址变动就全完了。 使用绝对路径。Hugo在构建静态网页时会将content/下的文件夹和static文件本身都拷贝到网址之下（应该是基于设定的baseUrl？），所以如果图片是这样放的： posts |-article |-article.md |-img.png 那么在article.md中可以使用![](/posts/article/img.png)来引用图片。 如果图片是这样放的： static |-images |-img.png 那么在article.md中可以使用![](/images/img.png)来引用图片。 不过在这个动荡的时代，资源还是自己掌握最好哇！说到这我又想起来以后自己搞一个家用NAS的Flag，想必又是一个大坑…… 顺便一提，如果要调整插入图片的位置和大小的话，markdown自身语法支持并不好，而使用html的话Hugo好像支持也不太完善，因此使用Hugo提供的Shortcodes是一个不错的选择，回头专开一章写一写（挖坑不填警告）。 ","date":"2021-12-21","objectID":"/blog-building-record/:3:1","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"代码高亮问题 Hugo提供了Shortcodes支持代码块高亮，但是Shortcodes我还没搞明白…… 万幸的是，Hugo从v0.60.0开始支持如下写法： ```python {linenos=true, hl_lines=[1, \"15-17\"], linenostart=199} //code ``` 这种写法好像只有goldmark渲染器支持。解释一下大括号中的元素： linenos：布尔值，是否显示行号。 hl_lines：需要高亮渲染的行号。 linenostart：行号开始显示的值。 ","date":"2021-12-21","objectID":"/blog-building-record/:3:2","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"搜索问题 PaperMod主题内置了Fuse.js搜索功能，首先需要在config.yaml加入： outputs:home:- HTML- RSS- JSON# is necessary 之后需要在content/下新建一个search.md（我的是search/_index.md），表示一个新页面，并添加如下内容： ---title:\"Search\"# in any language you wantlayout:\"search\"# is necessary# url: \"/archive\"# description: \"Description for Search\"summary:\"search\"--- 其中layout: \"search\"是必要的，它指定了要以“search”的页面结构来渲染这一页。 其实主题作者基本把搜索都给弄好了，但是我一开始傻傻地把.yaml里要加代码的位置搞错了，把outputs加到了param参数下，人家应该在根下自成一个参数的。因此搜索不好使，我还把搜索页面的描述改成了“随时失灵……”。 ","date":"2021-12-21","objectID":"/blog-building-record/:3:3","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"分享按钮问题 一开始每篇文章最下面都会有一行分享按钮，我觉得不好看而且实用性不高（都是些Twitter、Facebook啥的），就想给它禁用掉。为此经历了三个阶段： 在项目内搜索twitter.com，发现themes/PaperMod/layouts/partials/share_icons.html包含这一字段，于是新建layouts/partials/share_icons.html并置为空文件，这样可以覆盖主题里的对应文件。为防止误删我还特意写了一段注释（# 不要删除这段空循环否则后果自负.jpg）。 可是马上我就发现，可以通过在文章.md的front matter（即前缀）中声明disableShare: true来禁用当前页面的分享按钮，于是我把第一步的空文件删掉，给目前的每篇文章都加上这个声明，并且给archetypes/default.md里也加了一下。这个文件是每次运行Hugo new新建文章时的模板，这样我的新文章也都能不显示分享了。 一天后，我在翻阅config.yaml时发现一行 ShowShareButtons:true 啊这，难道是【那个功能】！改成false试了一下果然…… 大概这就是“认识的波浪式前进与螺旋式上升吧”。 ","date":"2021-12-21","objectID":"/blog-building-record/:3:4","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["小站纪念墙"],"content":"评论问题 Disqus Hogo对评论的支持与主题有关。我用的PaperMod虽然没有内置主题，但是它留下了自定义的接口，既然有接口那可不能浪费了啊。 首先按照PaperMod主题的文档新建一个layouts/partials/comments.html文件，还要修改config.yaml： params:comments:true 接着按照Hugo的文档去注册一个Disqus账号获得disqus-short-name，这是什么呢？原来Disqus会对我登记的每一个站点生成一个disqus-short-name.disqus.com的管理页面，这个short name就是里面的三级域名，当然这是可以在登记网站时自定义的。 获得short name之后，需要回config.yaml中把它记下来： disqusShortname:disqus-short-name 之后再根据Hugo官方的这个文档，复制里面的layouts/partials/disqus.html到我前面创建的comments.html里（不能改名，这个文件会按名字在layouts/_default/single.html中被调用渲染），之后注释掉里面检测localhost的if语句，就可以本地调试看到评论区出现啦。 PS：disqus.html的内容在Disqus的上手文档里也有提供，好像叫做Universal Code，两者大差不差，区别就是Hugo的代码调用了.Site.DisqusShortname来获取short name而Disqus的代码是直接把short name写在链接里了。 为了防止评论出bug，我还配置了一下disqus_identifier和disqus_url，具体是在comments.html中script一开始加入代码： var disqus_config = function() { this.page.title = '{{ .Title }}'; this.page.url = '{{ .Permalink }}'; this.page.identifier = '{{ .Permalink }}'; }; 不过效果如何还有待验证，也可能就是个安慰剂，反正有备无患嘛。 还有，Disqus默认的评论区总感觉有种湾湾风格不知道为啥……回头看看能不能美化一点，或者看别人用的Waline挺好看的说不定换一下。 Gitalk Push到网站上后才发现Disqus在国内被墙了，还是换一个吧……先试试Gitalk，这是一个基于Github issue的评论服务，正好可以使用网站的公开仓库issue存放评论，官方文档在这里，但是对我来说写的不够傻瓜，于是又在别人的博客上找到了这个。 设置步骤如下： 在GithubSettings-\u003eDeveloper settings-\u003eOAuth Apps中新建一个授权，其中Homepage URL和Authorization callback URL都填主页的地址，并记住生成的clientID和clientSecret。 更改comments.html为 \u003cdiv id=\"gitalk-container\"\u003e\u003c/div\u003e \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\"\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e const gitalk = new Gitalk({ clientID: '{{ .Site.Params.Gitalk.clientID }}', clientSecret: '{{ .Site.Params.Gitalk.clientSecret }}', repo: '{{ .Site.Params.Gitalk.repo }}', owner: '{{ .Site.Params.Gitalk.owner }}', admin: ['{{ .Site.Params.Gitalk.owner }}'], id: location.pathname, // Ensure uniqueness and length less than 50 distractionFreeMode: false // Facebook-like distraction free mode }); (function() { if ([\"localhost\", \"127.0.0.1\"].indexOf(window.location.hostname) != -1) { document.getElementById('gitalk-container').innerHTML = 'Gitalk comments not available by default when the website is previewed locally.'; return; } gitalk.render('gitalk-container'); })(); \u003c/script\u003e 在config.yaml中加入相关参数： params:Gitalk:clientID:your clientIDclientSecret:your clientSecretrepo:\"Woodencross.github.io\"owner:\"Woodencross\"admin:[\"Woodencross\"] 并设置 comments:true 设置好之后，本地调试的话需要把检测localhost的代码删掉。建议是push到网站上再调试，因为评论需要登陆Github账号。Gitalk会给每一篇文章新建一个issue来存放评论，初始化时需要身份为admin的用户打开文章评论区才会自动新建一个issue。 效果如下： 亮色\" 亮色 与主题契合的挺好！美中不足的就是在暗色模式下评论依旧是亮色，有些违和： 暗色\" 暗色 只能说还是不够好呀。 Waline 同时 @waline/client 还带来了内置的暗黑模式支持。——Waline 于是我又来折腾辣。官方手册在此，这个写的很傻瓜基本上照做就没啥问题。 结束后我的comments.html是这样的： \u003cscript src=\"//cdn.jsdelivr.net/npm/@waline/client\"\u003e\u003c/script\u003e \u003cdiv id=\"waline-container\"\u003e\u003c/div\u003e \u003cscript\u003e Waline({ el: '#waline-container', serverURL: 'my server URL', }); \u003c/script\u003e 但是在网站暗色模式下依旧是亮色 依旧是亮色\" 依旧是亮色 于是来看手册： 通常网站会通过两种方式启用暗黑模式支持: 使用@media选择器通过prefers-color-scheme来根据设备颜色模式状态自动切换 通过修改dom根元素(html或body)的属性与class来动态应用或取消暗黑模式的颜色样式。 如果你在第一种方式的站点上启用Waline，你只需将dark设置为’auto’。 对于第二种站点，你需要将dark设置为令暗黑模式生效的CSS选择器。 首先尝试在Waline()中添加 dark: 'auto' 发现无效，说明我的网站应该是第二种情况，那就是说要填一个CSS选择器的名字？继续看手册的例子： vuepress-theme-hope: 它会在\u003cbody\u003e上添加theme-dark class来开启暗黑模式。那么你需要将dark选项设置为body.theme-dark。 在\u003cbody\u003e上添加？依照我贫瘠的html知识的指引，我打开了f12开发者模式，并尝试切换主题： 亮色主题\" 亮色主题 暗色主题\" 暗色主题 我超，还真有。于是添加 dark: 'body.dark' 终于暗了\" 终于暗了 大功告成！心里终于舒坦了~而且Waline还支持表情，感觉挺不赖，就先用着它了。 ","date":"2021-12-21","objectID":"/blog-building-record/:3:5","tags":["Hugo","Github","Disqus","Gitalk","Waline"],"title":"个人博客小站建设记录","uri":"/blog-building-record/"},{"categories":["随便叨叨"],"content":"第一篇博客！ 记录学习、生活以及任何一切。 ","date":"2021-12-21","objectID":"/my-first-post/:1:0","tags":["第一"],"title":"第一篇博客？","uri":"/my-first-post/"},{"categories":null,"content":"关于我 Woodencross，某些语境中等价于QC，一名普通人（目前）。 计划周更博客，给自己一个deadline可能更有动力。 ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"关于本站 2022-04-17 | 切换评论系统到 twikoo To be continued … ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"}]