[{"content":"Why Linux \u0026amp; Ubuntu 因为Linux很酷✔\n之前折腾过一阵Manjaro，是一个arch系的滚动更新的系统，结果被我滚挂过两次😅。因为要装在实验室电脑上，寒暑假可能一段时间不会碰它，这就又加大了滚挂的概率，所以这次捯饬一下Ubuntu。顺便换个口味，由KDE Plasma换成Gnome桌面环境体验一下。\nP.S. 试了一下Pop!_OS，好看是确实好看，但是自带的商店应用会每次在联网打开时卡死，啊这。\n安装过程 使用ventoy做启动盘，很方便，iso选择Ubuntu 20.04 LTS。\n上来先用Windows11的cmd格一下盘，在安装界面shift+F10：\n1diskpart 2list disk 3select disk 0 4clean 之后开始安装，一路next。\n换源 软件和更新--\u0026gt;Ubuntu软件--\u0026gt;下载自，我选了阿里云镜像。然后执行：\n1sudo apt update 2sudo apt upgrade 来更新。\n魔法 选择v2raya，不便多说。用Linux还是得有魔法，或者就用deepin那种，毕竟主要的生态还是在国外的。\n家目录转英文 选择中文安装系统之后，家目录下默认为中文，这样使用终端很不方便，于是将其英文化。\n  终端输入\n1export LANG=en_US 2xdg-user-dirs-gtk-update 在弹窗中同意。\n  终端输入\n1export LANG=zh_CN   注销再登陆，选择保留旧名称，不再提醒。\n  输入法 Ubuntu自带的ibus使用体验不是很好，候选字体缩放等等都是问题，这次图省事就装了搜狗输入法Linux版，关掉悬浮窗还是很干净的。\n总的来说，Ubuntu的缩放和字体渲染做的都很不错，至此新系统已经可以正常使用啦。\n优化 虽然KDE桌面环境扩展度高，但是折腾到最后总是有一种零碎的感觉，gnome反而更像一个整体。\nGnome Tweaks 这是Gnome桌面的优化软件，用来调整一些外观。\n1sudo apt install gnome-tweaks 在扩展--\u0026gt;Desktop Icons中关闭桌面文件夹和回收站图标。\nDock 在Gnome Extensions里安装Dash to Dock，调整图标大小为64，避开所有窗口，使用内置主题。\n字体 中文使用文泉驿米黑：\n1sudo apt install fonts-wqy-microhei 英文使用JetBrains Mono，下载后解压到~/.local/share/fonts（或/usr/share/fonts，安装为系统字体），并执行fc-cache -f -v。\n最后使用Gnome Tweaks来设置字体。\n主题 由于辣鸡显卡，装了自定义主题后总会出现贴图丢失的情况，所以就不搞自定义主题了，只改一下颜色，使用yaru-colors，clone下来之后sudo bash ./install.sh即可。我全部选择Aqua主题，比较清新。\n之后还需要改一下终端配色，在配置文件首选项里改成solarized-dark，与Aqua主题色也比较配。\nNote\n我的环境安装yaru-colors后出现图标变形错位的现象，卸载无法解决问题，请谨慎安装。参见Github issue。\nzsh \u0026amp; oh-my-zsh zsh，一个比默认的bash好用得多的shell，oh-my-zsh是zsh的一个框架，赋予其额外功能以及插件管理等。\n首先安装并切换默认shell为zsh:\n1sudo apt install zsh 2zsh # 进行初始设置，全按照默认即可 3chsh -s $(which zsh) # 切换默认shell 注意设置完后注销重新登陆。\n之后参照oh-my-zsh的指令安装oh-my-zsh:\n1sh -c \u0026#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 这一步需要魔法助力，没有魔法的话可以搜索使用gitee镜像。\n之后在~/.zshrc中更改配置，先改一下主题：\n1ZSH_THEME=\u0026#34;eastwood\u0026#34; 这个主题非常简约，深得我心。然后更改插件，在~/.zshrc中\n1plugins=(git) 说明oh-my-zsh默认开启git插件，后面自己配置插件就是下载好后填进括号里就行。介绍一下我安装的插件：\n  z 这个是默认装好的，需要自己开启，用处是根据历史快速跳转。比如之前访问过~/Downloads/game/pacman，再次访问的话只需z pacman即可。\n  zsh-syntax-highlighting 终端命令语法高亮显示。\n  zsh-autosuggestions 自动补全。\n  配置好后.zshrc是这样的：\n1plugins=(git z zsh-syntax-highlighting zsh-autosuggestions) fish shell fish是一个开箱即用的shell，几乎不需要自行配置。之前设置自定义终端颜色之后，与oh-my-zsh的颜色好像有点冲突，有时光标会不闪烁，很难受，于是改用了fish。\n1sudo apt install fish 2chsh -s $(which fish) Pop Shell Pop Shell来源于基于Ubuntu的Pop!_OS，拥有非常好用的窗口自动平铺功能，会按照打开窗口的先后顺序以斐波那契数列形式在桌面上自动平铺。当然如果你愿意折腾，也可以使用awesome、i3wm等。\n首先去下载它的release，之后安装TypeScript和Make：\n1sudo apt install node-typescript make 将release解压缩后在目录中执行\n1make local-install 安装完毕后，在右上角打开Tile Windows和Show Active Hint。\n清理启动引导项 因为来回装了不少系统，因此efi启动引导项非常多，正好今天查了查怎么删除：使用efibootmgr。\n1efibootmgr # 列出所有引导项 2efibootmgr -b xxxx -B # 删除序号为xxxx的引导项 后记 虽然说本文内容不多，但是前前后后也是折腾了好几天，其间遇到各种细节问题，不胜枚举。有句话说得好：“Linux is free when your time is free”，此番过后也是深以为然。话又说回来，虽然历经坎坷，但过程中获得的快乐与成就感不会骗人。我想这就值得了。😄\n","permalink":"https://woodencross.github.io/posts/tech/linux-ubuntu-record/","summary":"Linux is free when your time is free","title":"Linux \u0026 Ubuntu 折腾记录"},{"content":"今天终于把拖延已久的加强针打了，从十二月拖到了三月。拖拉的原因大致有三：一是校医院之前每周只半天供应疫苗，要打需要提前在网上预约，对我这种没什么时间概念的人来说，很容易就错过去了。二是杭州这边老在下雨，不打伞湿一身，打伞湿半身，实在是不想出门。三是懒。\n事实证明，里面穿个短袖去打疫苗是无比明智的决定。本科打疫苗时就没有穿，只能把领子扒拉下来，露出肩膀，一直持续到针眼不再流血才行，那画面私以为，“不是很得体”。于是今日特意加了一件短袖，打针时只需左胳膊脱掉卫衣，可以说是从容不迫，等待医学观察时都能感受到刚扒拉完领子的人投来赞赏的目光。我略带得意，不时瞧向打针处，就想瞅瞅还有几个扒拉领子的。好巧不巧，轮到一位女士，她的领口比较大，扒拉下来后有些警觉地张望着，正与我四目相对。我眼神光速躲闪。医学观察半个小时，于是我度过了东张西望的五分钟，和正襟危坐的二十五分钟。正襟危坐，但是得体。\n值得一提的是，我按针眼的棉签上没有一滴血。我将喜悦分享，小卢：“你好骄傲，why？”我：“小确傲”。\n最近看到一个说法是“被疫情偷走的青春”。他们说，如果没有疫情，本可以有超棒的毕业旅行，有同学聚餐，有五彩斑斓的生活。我想了想，如果没有疫情，我本可以有什么呢？大概就是见小卢更方便了，再无其它。我不喜欢热闹，所以应该和他们口中的那种生活是天生的绝缘体。毕业旅行和朋友有过一次，很好玩但是也没有对它很执着。长时间呆在家里寝室里，我也没有什么不适感。如果人生是一列火车，那疫情也许是岔路口，在有的人顺畅直行时，坏笑着咣叽一下给车头导偏；接着我的小火车过来，疫情准备也给我来一下，结果咣叽打空，哎，这哥们就没打算直着走？也不是说众人皆醉我独醒，只是我对“偷走青春”这种说法没有很大共鸣而已。允许有的青春是彩色，那也该允许有的青春是素色。私以为，青春不该是一串同质化的仪式行为，青春的是人，是我，我在这个年纪做的事，都是青春。\n也许回头有孩子了可以说，“你爹年轻的时候全世界死了几千万，而你爹我，活下来了”。超酷的。\n","permalink":"https://woodencross.github.io/posts/life/enhanced-vaccine/","summary":"目前生命体征稳定","title":"打了加强针"},{"content":"起因 之前所有的文章都是直接堆在/posts下，虽然用了categories和tags双分类，但是感觉还是不够好，比如无法从一篇文章导航到它所属的category。于是今天决定使用二级目录来储存文章，参考这篇文章。\n二级目录 首先删去之前的categories分类。在config.yaml中\n1taxonomies: 2 #category: categories 注释掉 3 tag: tags 4 5menu: 6 main: 7 - identifier: posts 8 name: 文章 9 url: /posts/ 10 weight: 1 11 #- identifier: categories 注释掉 12 #name: 分类 13 #url: /categories/ 14 #weight: 2 15 - identifier: archives 16 name: 时间线 17 url: /archives/ 18 weight: 10 19 - identifier: tags 20 name: 标签 21 url: /tags/ 22 weight: 20 23 - identifier: search 24 name: 搜索 25 url: /search/ 26 weight: 30 27 - identifier: about 28 name: 关于 29 url: /about/ 30 weight: 40 然后再删去archetypes里的相关内容。\n这次暂且先将二级目录分为三类，分别是生活相关的生活小窝、技术相关的技术图书馆，还有建站专题博客历史馆。国有国史，站有站史，这很合理（有点赛博过家家的感觉了）。重排好的目录如图。\n 要注意每个二级目录下都要有一个_index.md，例如/life下的：\n1--- 2title: 生活小窝 #标题 3hidemeta: true #隐藏这篇md的信息，如时间作者等 4weight: 20 #排序时的权重 5--- 修改字体 新建assets/css/extended/blank.css，在里面的修改会覆盖默认css。\n1body{ 2 font-family: FangSong; 3 font-size: 18px; 4 line-height: 1.6; 5} 修改为仿宋字体，目前感觉更好看点。\n 原来的\n   现在的\n   原来的\n   现在的\n  ","permalink":"https://woodencross.github.io/posts/site/change-directory-and-font/","summary":"感觉好看了点~","title":"更改一下博客目录结构与字体"},{"content":"Hugo里使用post_meta描述文章的信息，比如发布时间、作者、标签、阅读时长等。这次受这篇文章的启发来修改一下，使其更加美观。\n将themes/PaperMod/layouts/partials/post_meta.html拷贝到layouts/partials下，并修改：\n1{{- $scratch := newScratch }} 2\u0026lt;!--创建时间--\u0026gt; 3{{- if not .Date.IsZero -}} 4{{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;发表于\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#34; (.Date) (.Date | time.Format (default \u0026#34;2006-01-02\u0026#34; .Site.Params.DateFormat)))) }} 5{{- end }} 6\u0026lt;!--添加：修改时间--\u0026gt; 7{{- if (.Param \u0026#34;ShowLastMod\u0026#34;) -}} 8{{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;修改于\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#34; (.Lastmod) (.Lastmod | time.Format (default \u0026#34;2006-01-02\u0026#34; .Site.Params.DateFormat)))) }} 9{{- end }} 10\u0026lt;!--阅读时间--\u0026gt; 11{{- if (.Param \u0026#34;ShowReadingTime\u0026#34;) -}} 12{{- $scratch.Add \u0026#34;meta\u0026#34; (slice (i18n \u0026#34;read_time\u0026#34; .ReadingTime | default (printf \u0026#34;%d min\u0026#34; .ReadingTime))) }} 13{{- end }} 14\u0026lt;!--字数统计--\u0026gt; 15{{- if (.Param \u0026#34;ShowWordCount\u0026#34;) -}} 16{{- $scratch.Add \u0026#34;meta\u0026#34; (slice (i18n \u0026#34;words\u0026#34; .WordCount | default (printf \u0026#34;%d words\u0026#34; .WordCount))) }} 17{{- end }} 18 19{{- with (partial \u0026#34;author.html\u0026#34; .) }} 20{{- $scratch.Add \u0026#34;meta\u0026#34; (slice .) }} 21{{- end }} 22\u0026lt;!--分隔符--\u0026gt; 23{{- with ($scratch.Get \u0026#34;meta\u0026#34;) }} 24{{- delimit . \u0026#34;\u0026amp;nbsp;·\u0026amp;nbsp;\u0026#34; -}} 25{{- end -}} 在config.yaml中：\n1enableGitInfo: false # 关闭gitinfo，否则lastmod会显示为最后commit时间，有些bug 2params: 3 DateFormat: \u0026#34;2006-01-02\u0026#34; # 日期格式 4 ShowLastMod: true # 显示lastmod 然后就可以在文章的front_matter中配置：\n1lastmod: 2022-03-21T21:53:51+08:00 也可以写进archetypes中：\n1lastmod: {{ .Date }} 后面再编辑时手动修改即可。\n","permalink":"https://woodencross.github.io/posts/site/modify-post-meta/","summary":"Little work","title":"修改文章post_meta信息"},{"content":"起因 最初部署博客是在本地直接编译框架源码，然后把编译后的静态网页文件上传到Github Pages仓库。可是同时我又想管理框架源码，如果源码和静态网页托管到一个仓库的话，那么仓库的可见性又成了问题：Private的话网页不能互联网公开可见，Public的话源码又暴露了。试了一下分别本地管理两个仓库，可是这样每次都要commit两遍push两遍，怪麻烦的。于是秉承程序员“花六个小时写一个自动化脚本，做一个动手五分钟就能搞定的任务”的黄金精神，我又开始折腾Github Actions自动部署啦。\n过程 官方（也许？）手册在此：GitHub Actions for Hugo GitHub Pages\nGithub通过检测仓库根目录下的/.github/workflows/*.yaml来执行Actions。因此需要新建一个.yaml文件，取名随意，之后复制手册里的默认配置并修改。折腾一下午后我的配置文件如下：\n1name: GitHub Pages # 为action取个名 2 3on: 4 push: # 设定当仓库收到push后执行action 5 branches: # 设定触发action的分支 6 - master 7 # pull_request: # 我不需要pr后执行action，所以注释掉 8 9jobs: 10 deploy: 11 runs-on: ubuntu-20.04 # 设定action的执行环境 12 concurrency: 13 group: ${{ github.workflow }}-${{ github.ref }} 14 steps: # 需要执行的步骤 15 - uses: actions/checkout@v2 # 使用现成的action库 16 with: # 设定执行的环境变量 17 submodules: true 18 fetch-depth: 0 19 20 - name: Setup Hugo 21 uses: peaceiris/actions-hugo@v2 22 with: 23 hugo-version: \u0026#39;latest\u0026#39; 24 extended: false 25 26 - name: Build 27 run: hugo # 直接执行的指令 28 29 - name: Deploy 30 uses: peaceiris/actions-gh-pages@v3 31 if: ${{ github.ref == \u0026#39;refs/heads/master\u0026#39; }} 32 with: 33 deploy_key: ${{ secrets.GH_PAGES }} # 改成自己deploy key的名字 34 external_repository: Woodencross/Woodencross.github.io # public库的地址 35 publish_branch: master # 要推送到public库的分支 36 publish_dir: ./public # 与源码的publishDir保持一致 37 commit_message: ${{ github.event.head_commit.message }} # 同步commit message 这里涉及到deploy key，这是什么呢？由于我的源码与action都在私有库里，静态网页在公开库里，而action自动部署的时候需要从私有库push到公开库，那么就需要一个像ssh key的东西（实际上就是ssh）来验证push者的身份。Github提供了三种验证方式，分别是github_token deploy_key与personal_token，其中只有deploy_key基于ssh，另两个都是基于https，那我自然选择最安全（理论上）的啦。\n通过\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; # You will get 2 files: # gh-pages.pub (public key) # gh-pages (private key) 生成公钥私钥文件，将公钥加入公开库的Settings-\u0026gt;Deploy keys中（随便取个名字），将私钥加入私有库的Settings-\u0026gt;Secrets中，注意这个的取名要和.yaml文件中的一致，这样私有库就能通过身份验证向公开库push内容了。当在源码中更新好内容后，只需要向私有库push，剩下的编译部署交给Github Actions来完成！\n当然纸面总结上看起来是很轻松的工作，但是实操起来踩的坑可不少，不然怎么花了一个下午？\n一个是submodule的问题。因为我之前的主题模板是直接git clone到源码里的，这就导致action执行时报错说“找不到.gitmodules”，应该是使用的action库默认大家的模板都是submodule吧。但是submodule这个东西实在是不好管理，老是搞得我重建仓库，而我自己又不会写action库，所以就还是勉为其难地用git submodule add来添加模板了。\nPS：好像在一些情况下不能用git submodule add而要用git submodule--helper add。\n二是Github分支问题，我的仓库都是默认的master，而文档里copy来的分支默认是main，有一处在第六行（高亮）很明显也是直接改了，但还有一处在第31行（高亮）……这个是真的很难注意到好吧。听朋友说Github主分支由master改叫main是黑命贵的产物，因为master有奴隶主的意思😅。真是差不多得了嗷。\n三是愚蠢的typo，.github/workflows少了个s！！我还寻思push之后Github action怎么不工作，一度以为是为了防挖矿设置了每小时最大工作次数。\n结语 总而言之，网站的源码保护和自动化部署在经历了一个下午的折腾后也算是完美收官。我的评价是：值！（甚至老想手痒多提交几次欣赏成果~）\n","permalink":"https://woodencross.github.io/posts/site/deploy-website-via-github-actions/","summary":"真是一个充实的下午。","title":"使用Github Actions部署私有仓库静态博客到Github Pages"},{"content":"为什么想建个人博客 一个重要的原因是因为想有一个地方可以自己记录一些东西，而各种现成的平台一是觉得自定义程度不够高，二是内容又会经过层层审核甚至被夹掉，所以到最后就选择了自建一个博客小站。看着小站在自己手中逐渐完善，就好像自己逐渐装修起来一个精致舒适的小屋一样，会真正有一种“属于我”的归属感，这也是这个小站叫做“Woodencross\u0026rsquo;s Cyber Home”的原因。寄蜉蝣于天地，渺沧海之一粟，希望这个小站能够成为QC在赛博空间里的“锚”。\n当然还有一个原因是忙完前一段突然得了点闲，就想折腾了😅。\nHugo\u0026amp;Github Pages 自建博客当然要先选择一个框架啦，于是Google了一下目前主流的博客框架，再上Github看了一下⭐，Hugo的星最多，那么就决定是你了！\n至于Github Pages，白嫖嘛，多是一件美事啊。\n踩坑经历 框架问题 Todo: config.yaml与content/\n图片插入问题 由于编译静态网站后文件结构不同，因此在文章的.md中使用相对路径插入图片是行不通的，如下：\nposts  |-article  |-article.md  |-img.png 此时在article.md中使用![](./img.png)引用图片会404。\n那么正确的图片引用姿势有这几种：\n  使用图床，然后引用图片网址。这样的风险就是万一图床挂了或者网址变动就全完了。\n  使用绝对路径。Hugo在构建静态网页时会将content/下的文件夹和static文件本身都拷贝到网址之下（应该是基于设定的baseUrl？），所以如果图片是这样放的：\nposts  |-article  |-article.md  |-img.png 那么在article.md中可以使用![](/post/article/img.png)来引用图片。\n如果图片是这样放的：\nstatic  |-images  |-img.png 那么在article.md中可以使用![](/images/img.png)来引用图片。\n  不过在这个动荡的时代，资源还是自己掌握最好哇！说到这我又想起来以后自己搞一个家用NAS的Flag，想必又是一个大坑……\n顺便一提，如果要调整插入图片的位置和大小的话，markdown自身语法支持并不好，而使用html的话Hugo好像支持也不太完善，因此使用Hugo提供的Shortcodes是一个不错的选择，回头专开一章写一写（挖坑不填警告）。\n代码高亮问题 Hugo提供了Shortcodes支持代码块高亮，但是Shortcodes我还没搞明白……\n万幸的是，Hugo从v0.60.0开始支持如下写法：\n1 ```python {linenos=true, hl_lines=[1, \u0026#34;15-17\u0026#34;], linenostart=199} 2 //code 3 ``` 这种写法好像只有goldmark渲染器支持。解释一下大括号中的元素：\n linenos：布尔值，是否显示行号。 hl_lines：需要高亮渲染的行号。 linenostart：行号开始显示的值。  搜索问题 PaperMod主题内置了Fuse.js搜索功能，首先需要在config.yaml加入：\n1outputs: 2 home: 3 - HTML 4 - RSS 5 - JSON # is necessary 之后需要在content/下新建一个search.md（我的是search/_index.md），表示一个新页面，并添加如下内容：\n1--- 2title: \u0026#34;Search\u0026#34; # in any language you want 3layout: \u0026#34;search\u0026#34; # is necessary 4# url: \u0026#34;/archive\u0026#34; 5# description: \u0026#34;Description for Search\u0026#34; 6summary: \u0026#34;search\u0026#34; 7--- 其中layout: \u0026quot;search\u0026quot;是必要的，它指定了要以“search”的页面结构来渲染这一页。\n其实主题作者基本把搜索都给弄好了，但是我一开始傻傻地把.yaml里要加代码的位置搞错了，把outputs加到了param参数下，人家应该在根下自成一个参数的。因此搜索不好使，我还把搜索页面的描述改成了“随时失灵……”。\n分享按钮问题 一开始每篇文章最下面都会有一行分享按钮，我觉得不好看而且实用性不高（都是些Twitter、Facebook啥的），就想给它禁用掉。为此经历了三个阶段：\n 在项目内搜索twitter.com，发现themes/PaperMod/layouts/partials/share_icons.html包含这一字段，于是新建layouts/partials/share_icons.html并置为空文件，这样可以覆盖主题里的对应文件。为防止误删我还特意写了一段注释（# 不要删除这段空循环否则后果自负.jpg）。 可是马上我就发现，可以通过在文章.md的front matter（即前缀）中声明disableShare: true来禁用当前页面的分享按钮，于是我把第一步的空文件删掉，给目前的每篇文章都加上这个声明，并且给archetypes/default.md里也加了一下。这个文件是每次运行Hugo new新建文章时的模板，这样我的新文章也都能不显示分享了。 一天后，我在翻阅config.yaml时发现一行 1ShowShareButtons: true 啊这，难道是【那个功能】！改成false试了一下果然……  大概这就是“认识的波浪式前进与螺旋式上升吧”。\n评论问题 Disqus Hogo对评论的支持与主题有关。我用的PaperMod虽然没有内置主题，但是它留下了自定义的接口，既然有接口那可不能浪费了啊。\n首先按照PaperMod主题的文档新建一个layouts/partials/comments.html文件，还要修改config.yaml：\n1params: 2 comments: true 接着按照Hugo的文档去注册一个Disqus账号获得disqus-short-name，这是什么呢？原来Disqus会对我登记的每一个站点生成一个disqus-short-name.disqus.com的管理页面，这个short name就是里面的三级域名，当然这是可以在登记网站时自定义的。\n获得short name之后，需要回config.yaml中把它记下来：\n1disqusShortname: disqus-short-name 之后再根据Hugo官方的这个文档，复制里面的layouts/partials/disqus.html到我前面创建的comments.html里（不能改名，这个文件会按名字在layouts/_default/single.html中被调用渲染），之后注释掉里面检测localhost的if语句，就可以本地调试看到评论区出现啦。\nPS：disqus.html的内容在Disqus的上手文档里也有提供，好像叫做Universal Code，两者大差不差，区别就是Hugo的代码调用了.Site.DisqusShortname来获取short name而Disqus的代码是直接把short name写在链接里了。\n为了防止评论出bug，我还配置了一下disqus_identifier和disqus_url，具体是在comments.html中script一开始加入代码：\n1var disqus_config = function() { 2 this.page.title = \u0026#39;{{ .Title }}\u0026#39;; 3 this.page.url = \u0026#39;{{ .Permalink }}\u0026#39;; 4 this.page.identifier = \u0026#39;{{ .Permalink }}\u0026#39;; 5}; 不过效果如何还有待验证，也可能就是个安慰剂，反正有备无患嘛。\n还有，Disqus默认的评论区总感觉有种湾湾风格不知道为啥……回头看看能不能美化一点，或者看别人用的Waline挺好看的说不定换一下。\nGitalk Push到网站上后才发现Disqus在国内被墙了，还是换一个吧……先试试Gitalk，这是一个基于Github issue的评论服务，正好可以使用网站的公开仓库issue存放评论，官方文档在这里，但是对我来说写的不够傻瓜，于是又在别人的博客上找到了这个。\n设置步骤如下：\n 在GithubSettings-\u0026gt;Developer settings-\u0026gt;OAuth Apps中新建一个授权，其中Homepage URL和Authorization callback URL都填主页的地址，并记住生成的clientID和clientSecret。 更改comments.html为 1 \u0026lt;div id=\u0026#34;gitalk-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 2 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css\u0026#34;\u0026gt; 3 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 4 \u0026lt;script\u0026gt; 5 const gitalk = new Gitalk({ 6 clientID: \u0026#39;{{ .Site.Params.Gitalk.clientID }}\u0026#39;, 7 clientSecret: \u0026#39;{{ .Site.Params.Gitalk.clientSecret }}\u0026#39;, 8 repo: \u0026#39;{{ .Site.Params.Gitalk.repo }}\u0026#39;, 9 owner: \u0026#39;{{ .Site.Params.Gitalk.owner }}\u0026#39;, 10 admin: [\u0026#39;{{ .Site.Params.Gitalk.owner }}\u0026#39;], 11 id: location.pathname, // Ensure uniqueness and length less than 50 12 distractionFreeMode: false // Facebook-like distraction free mode 13 }); 14 (function() { 15 if ([\u0026#34;localhost\u0026#34;, \u0026#34;127.0.0.1\u0026#34;].indexOf(window.location.hostname) != -1) { 16 document.getElementById(\u0026#39;gitalk-container\u0026#39;).innerHTML = \u0026#39;Gitalk comments not available by default when the website is previewed locally.\u0026#39;; 17 return; 18 } 19 gitalk.render(\u0026#39;gitalk-container\u0026#39;); 20 })(); 21 \u0026lt;/script\u0026gt;  在config.yaml中加入相关参数： 1 params: 2 Gitalk: 3 clientID: your clientID 4 clientSecret: your clientSecret 5 repo: \u0026#34;Woodencross.github.io\u0026#34; 6 owner: \u0026#34;Woodencross\u0026#34; 7 admin: [\u0026#34;Woodencross\u0026#34;] 并设置 1 comments: true   设置好之后，本地调试的话需要把检测localhost的代码删掉。建议是push到网站上再调试，因为评论需要登陆Github账号。Gitalk会给每一篇文章新建一个issue来存放评论，初始化时需要身份为admin的用户打开文章评论区才会自动新建一个issue。\n效果如下：\n 与主题契合的挺好！美中不足的就是在暗色模式下评论依旧是亮色，有些违和：\n 只能说还是不够好呀。\nWaline  同时 @waline/client 还带来了内置的暗黑模式支持。——Waline\n 于是我又来折腾辣。官方手册在此，这个写的很傻瓜基本上照做就没啥问题。\n结束后我的comments.html是这样的：\n1\u0026lt;script src=\u0026#34;//cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2\u0026lt;div id=\u0026#34;waline-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3\u0026lt;script\u0026gt; 4 Waline({ 5 el: \u0026#39;#waline-container\u0026#39;, 6 serverURL: \u0026#39;my server URL\u0026#39;, 7 }); 8\u0026lt;/script\u0026gt; 但是在网站暗色模式下依旧是亮色\n 于是来看手册：\n 通常网站会通过两种方式启用暗黑模式支持:\n 使用@media选择器通过prefers-color-scheme来根据设备颜色模式状态自动切换 通过修改dom根元素(html或body)的属性与class来动态应用或取消暗黑模式的颜色样式。 如果你在第一种方式的站点上启用Waline，你只需将dark设置为\u0026rsquo;auto\u0026rsquo;。 对于第二种站点，你需要将dark设置为令暗黑模式生效的CSS选择器。   首先尝试在Waline()中添加\n1dark: \u0026#39;auto\u0026#39; 发现无效，说明我的网站应该是第二种情况，那就是说要填一个CSS选择器的名字？继续看手册的例子：\n vuepress-theme-hope: 它会在\u0026lt;body\u0026gt;上添加theme-dark class来开启暗黑模式。那么你需要将dark选项设置为body.theme-dark。\n 在\u0026lt;body\u0026gt;上添加？依照我贫瘠的html知识的指引，我打开了f12开发者模式，并尝试切换主题：\n 亮色\n   暗色\n  我超，还真有。于是添加\n1dark: \u0026#39;body.dark\u0026#39;  大功告成！心里终于舒坦了~而且Waline还支持表情，感觉挺不赖，就先用着它了。\n","permalink":"https://woodencross.github.io/posts/site/blog-building-record/","summary":"记录一下自己搭建个人博客的踩坑历程。","title":"个人博客小站建设记录"},{"content":"第一篇博客！ 记录学习、生活以及任何一切。\n测试折叠 内容 \n","permalink":"https://woodencross.github.io/posts/life/my-first-post/","summary":"第一篇博客！ 记录学习、生活以及任何一切。 测试折叠 内容","title":"第一篇博客？"}]