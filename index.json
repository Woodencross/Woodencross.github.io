[{"content":"起因 最初部署博客是在本地直接编译框架源码，然后把编译后的静态网页文件上传到Github Pages仓库。可是同时我又想管理框架源码，如果源码和静态网页托管到一个仓库的话，那么仓库的可见性又成了问题：Private的话网页不能互联网公开可见，Public的话源码又暴露了。试了一下分别本地管理两个仓库，可是这样每次都要commit两遍push两遍，怪麻烦的。于是秉承程序员“花六个小时写一个自动化脚本，做一个动手五分钟就能搞定的任务”的黄金精神，我又开始折腾Github Actions自动部署啦。\n过程 官方（也许？）手册在此：GitHub Actions for Hugo GitHub Pages\nGithub通过检测仓库根目录下的/.github/workflows/*.yaml来执行Actions。因此需要新建一个.yaml文件，取名随意，之后复制手册里的默认配置并修改。折腾一下午后我的配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  name: GitHub Pages  # 为action取个名 on: push: # 设定当仓库收到push后执行action branches: # 设定触发action的分支 - master  # pull_request: # 我不需要pr后执行action，所以注释掉 jobs: deploy: runs-on: ubuntu-20.04  # 设定action的执行环境 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: # 需要执行的步骤 - uses: actions/checkout@v2  # 使用现成的action库 with: # 设定执行的环境变量 submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: false - name: Build run: hugo  # 直接执行的指令 - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/master\u0026#39; }}  with: deploy_key: ${{ secrets.GH_PAGES }}  # 改成自己deploy key的名字 external_repository: Woodencross/Woodencross.github.io  # public库的地址 publish_branch: master  # 要推送到public库的分支 publish_dir: ./public  # 与源码的publishDir保持一致 commit_message: ${{ github.event.head_commit.message }}  # 同步commit message   这里涉及到deploy key，这是什么呢？由于我的源码与action都在私有库里，静态网页在公开库里，而action自动部署的时候需要从私有库push到公开库，那么就需要一个像ssh key的东西（实际上就是ssh）来验证push者的身份。Github提供了三种验证方式，分别是github_token deploy_key与personal_token，其中只有deploy_key基于ssh，另两个都是基于https，那我自然选择最安全（理论上）的啦。\n通过\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; # You will get 2 files: # gh-pages.pub (public key) # gh-pages (private key) 生成公钥私钥文件，将公钥加入公开库的Settings-\u0026gt;Deploy keys中（随便取个名字），将私钥加入私有库的Settings-\u0026gt;Secrets中，注意这个的取名要和.yaml文件中的一致，这样私有库就能通过身份验证向公开库push内容了。当在源码中更新好内容后，只需要向私有库push，剩下的编译部署交给Github Actions来完成！\n当然纸面总结上看起来是很轻松的工作，但是实操起来踩的坑可不少，不然怎么花了一个下午？\n一个是submodule的问题。因为我之前的主题模板是直接git clone到源码里的，这就导致action执行时报错说“找不到.gitmodules”，应该是使用的action库默认大家的模板都是submodule吧。但是submodule这个东西实在是不好管理，老是搞得我重建仓库，而我自己又不会写action库，所以就还是勉为其难地用git submodule add来添加模板了。PS：好像在一些情况下不能用git submodule add而要用git submodule--helper add。\n二是Github分支问题，我的仓库都是默认的master，而文档里copy来的分支默认是main，有一处在第六行（高亮）很明显也是直接改了，但还有一处在第31行（高亮）……这个是真的很难注意到好吧。听朋友说Github主分支由master改叫main是黑命贵的产物，因为master有奴隶主的意思😅。真是差不多得了嗷。\n三是愚蠢的typo，.github/workflows少了个s！！我还寻思push之后Github action怎么不工作，一度以为是为了防挖矿设置了每小时最大工作次数。\n结语 总而言之，网站的源码保护和自动化部署在经历了一个下午的折腾后也算是完美收官。我的评价是：值！（甚至老想手痒多提交几次欣赏成果~）\n","permalink":"https://woodencross.github.io/posts/deploy-website-via-github-actions/","summary":"真是一个充实的下午。","title":"使用Github Actions部署私有仓库静态博客到Github Pages"},{"content":"为什么选择Linux\u0026amp;Manjaro 当然是因为Linux很酷✔\n当然正经地说，酷确实是一个原因。除此之外，另一个原因是我觉得Linux在各种方面都比Windows更适合程序员：\n 一切皆文件。没有C盘D盘等盘符让命令行cd起来很顺手（我的Windows电脑现在都是格成一个盘，数据放OneDrive就好啦）； 优秀的包管理方式。统一的命令行安装卸载方式让我觉得自己的电脑很干净，而Windows下各种ProgramData Program Files（甚至路径里有一个空格！）Program Files (x86)还有注册表看的人头大。Windows下的Scoop和Choco？用起来总觉得治标不治本； 高度自定义的外观。我对dock栏有一种莫名的执着，而Windows只能用它的资源管理器，第三方的dock总会有各种适配问题； 越用Linux就越嫌弃Windows。个人经验。  那为什么不用Mac？因为穷。\n当然Linux也有许多缺点，比如：\n 不能打游戏！因此个人主力机肯定还得是Windows； 驱动支持不好。比如我新买的Lenovo Yoga 13s，本来拿到第一件事就是想装个Linux，结果因为网卡比较新所以内核驱动不支持，联想官方放出的驱动也只有.exe的，加上触摸板用起来手感很奇怪，而且还有Office需求，因此随身轻薄本也得是Windows；  综上，我盯上了实验室的电脑：硬件旧，无Office需求，coding场合多，不打游戏不装QQ微信，而且只有一块物理硬盘，简直完美适合。\n至于操作系统的选择，首选KDE桌面环境（GNOME的扩展性感觉还是稍弱了，而且还需要gnome-tweak结合浏览器插件来管理桌面插件？感觉不够Unix哲学！而且KDE的Yakuake下拉终端真的香），试过Manjaro与Kubuntu，体验下来还是Manjaro 更胜一筹。\n顺带一提，大概两个月之前就是这台实验室电脑上的Manjaro刚崩了一次，警 钟 长 鸣。\n安装记录 Todo\n","permalink":"https://woodencross.github.io/posts/linux-manjaro-record/","summary":"Liiiiiiiiiiinux!","title":"Linux/Manjaro 折腾记录"},{"content":"为什么想建个人博客 一个重要的原因是因为想有一个地方可以自己记录一些东西，而各种现成的平台一是觉得自定义程度不够高，二是内容又会经过层层审核甚至被夹掉，所以到最后就选择了自建一个博客小站。看着小站在自己手中逐渐完善，就好像自己逐渐装修起来一个精致舒适的小屋一样，会真正有一种“属于我”的归属感，这也是这个小站叫做“Woodencross\u0026rsquo;s Cyber Home”的原因。寄蜉蝣于天地，渺沧海之一粟，希望这个小站能够成为QC在赛博空间里的“锚”。\n当然还有一个原因是忙完前一段突然得了点闲，就想折腾了😅。\nHugo\u0026amp;Github Pages 自建博客当然要先选择一个框架啦，于是Google了一下目前主流的博客框架，再上Github看了一下⭐，Hugo的星最多，那么就决定是你了！\n至于Github Pages，白嫖嘛，多是一件美事啊。\n踩坑经历 框架问题 Todo: config.yaml与content/\n图片插入问题 由于编译静态网站后文件结构不同，因此在文章的.md中使用相对路径插入图片是行不通的，如下：\nposts |-article |-article.md |-img.png 此时在article.md中使用![](./img.png)引用图片会404。\n那么正确的图片引用姿势有这几种：\n  使用图床，然后引用图片网址。这样的风险就是万一图床挂了或者网址变动就全完了。\n  使用绝对路径。Hugo在构建静态网页时会将content/下的文件夹和static文件本身都拷贝到网址之下（应该是基于设定的baseUrl？），所以如果图片是这样放的：\nposts |-article |-article.md |-img.png 那么在article.md中可以使用![](/post/article/img.png)来引用图片。\n如果图片是这样放的：\nstatic |-images |-img.png 那么在article.md中可以使用![](/images/img.png)来引用图片。\n  不过在这个动荡的时代，资源还是自己掌握最好哇！说到这我又想起来以后自己搞一个家用NAS的Flag，想必又是一个大坑……\n顺便一提，如果要调整插入图片的位置和大小的话，markdown自身语法支持并不好，而使用html的话Hugo好像支持也不太完善，因此使用Hugo提供的Shortcodes是一个不错的选择，回头专开一章写一写（挖坑不填警告）。\n","permalink":"https://woodencross.github.io/posts/blog-building-record/","summary":"记录一下自己搭建个人博客的踩坑历程。","title":"个人博客小站建设记录"},{"content":"第一篇博客！ 记录学习、生活以及任何一切。\n","permalink":"https://woodencross.github.io/posts/my-first-post/","summary":"第一篇博客！ 记录学习、生活以及任何一切。","title":"第一篇博客？"}]